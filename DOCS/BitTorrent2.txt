+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
(Сервер "трекер" (BitTorrent-трекер) - осуществляющий координацию клиентов "BitTorrent")
================================[ http://dic.academic.ru/dic.nsf/ruwiki/256088 ]
Трекер связывает клиентов друг с другом, но напрямую не участвует в обмене раздаваемых файлов. Более того, трекер не имеет никакой информации
об этих файлах, поскольку клиенты только сообщают ему инфохеш.

(Принцип работы "BitTorrent", протокола для передачи данных)
--------------------------------[ http://dic.academic.ru/dic.nsf/ruwiki/7282 ]
--------------------------------[ https://wiki.theory.org/BitTorrentSpecification ]
Нагрузка на распространителя файла уменьшается благодаря тому, что клиенты начинают обмениваться данными сразу же, даже если файл не докачан ими до конца.

("Bencode" это формат используется в ".torrent" файлах)
--------------------------------[ http://dic.academic.ru/dic.nsf/ruwiki/1265962#sel= ]
--------------------------------[ http://ru.wikipedia.org/wiki/Bencode ]
Bencode — это формат, используемый p2p системой распространения файлов "BitTorrent" для хранения и передачи свободно структурированных данных.
Включает в себя 4-типа данных:
• строка байт,
• целое число,
• список (массив),
• словарь.

(".torrent" — используется в "p2p" сети "BitTorrent" и содержит информацию о "файлах", "трекерах" и др.)
================================[ http://dic.academic.ru/dic.nsf/ruwiki/1414460 ]
Содержит следующую информацию:
• URL трекера;
• Общую информацию о файлах (имя, длину и пр.) в данной раздаче;
• Контрольные суммы (точнее, хеш-суммы SHA1) сегментов раздаваемых файлов;
• PassKey пользователя, если он зарегистрирован на данном трекере. Длина ключа устанавливается трекером.
• (Необязательно) хеш-суммы файлов целиком
• (Необязательно) Альтернативные источники, работающие не по протоколу BitTorrent. Наиболее распространена поддержка так называемых web-сидов
(протокол HTTP), но допустимыми также являются ftp, ed2k, magnet URI.

(Однора́нговая, децентрализо́ванная или пи́ринговая сеть - peer-to-peer «P2P» - равный к равному)
================================[ http://ru.wikipedia.org/wiki/P2p ]
Это оверлейная компьютерная сеть, основанная на равноправии участников. Часто в такой сети отсутствуют выделенные серверы, а каждый узел (peer) является как клиентом, 
так и выполняет функции сервера. В отличие от архитектуры клиент-сервера, такая организация позволяет сохранять работоспособность сети при любом количестве и любом 
сочетании доступных узлов. Участниками сети являются пиры.

...............................................................................................................................................
*  (Сериализация класса производного от HashMap / Java SE (J2SE)) http://www.cyberforum.ru/java-j2se/thread1227715.html
   (...) https://bitbucket.org/frazboyz/bencoder/downloads
*  (Bencode) http://dic.academic.ru/dic.nsf/ruwiki/1265962#sel=
*  (BitTorrent) http://dic.academic.ru/dic.nsf/ruwiki/7282
*  (Трекер) http://dic.academic.ru/dic.nsf/ruwiki/256088
*  (.torrent) http://dic.academic.ru/dic.nsf/ruwiki/1414460
*  (Bencode Stream Parsing in Java) http://www.codecommit.com/blog/java/bencode-stream-parsing-in-java
*  (Пять вещей, которые вы не знали о... сериализации Java-объектов) http://www.ibm.com/developerworks/ru/library/j-5things1/
** (Пишем простейший торрент трекер на php) http://habrahabr.ru/post/96880/
...............................................................................................................................................



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
"BitTorrent" это протокола для передачи данных:
1. Есть сервер ("трекер"), осуществляющий координацию клиентов...
2. Есть метаданные (".torrent"), они содержут информацию о состоянии загрузки для клиентских файлов...
3. Формат в файлах метаданных (".torrent") определяется с помощью структуры "Bencode" (парсера)...

"Сериализация" - это сохранение текущего состояния для активного объекта с возможностью для восстановления этого состояния для такого объекта..
(например: есть класс-объект со своими полями и методами и в процессе выполнения поля этого объекта приобретают какие-то значения, а
механизм сериализации позволяет сохранять такое текущее состояние всех значений для полей этого объекта...)



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Например: возмем "связаный список" - это связанные по ссылке между собой объекты, которые хранят полезную информацию (телефонный справочник...)
В телефонном справочнике для каждого абонента есть такая информация: имя, номер абонента, место его проживания, дата рождения,
другая контактная информация (email), фото, рингтон, группа в которую он определен...
Перепирая по ссылке каждый следующий объект связанного списка можно получить доступ к данным любого абонента.
Точно по такому же принципу работает и механизм для аудио-видео проигрывателей..., только поля объектов хранят другие типы данных (канал для
частоты звукового тона, канал для видео-кадра - массив пикселей, ...).
Дело в том, что данные видео-фильма занимают большой размер и поэтому хранить такой большой объем данных в области оперативной памяти это
сложно, неэкономно и неэфективно... Поэтому в области оперативной памяти можно хранить список только для недавно-используемых элементов на
протяжении короткого периода (1~10 сек.), а все остальные элементы списка элементов сериализовать и сохранять в виде файла. И каждый раз когда
такой видео-плеер проигрывает очередные кадры из фильма - происходит чтение и восстановление (дессериализация) данных для объектов списка...
с определенной частотой обновления анимации.
При загрузки данных по сети, большие файлы разбиваются на маленькие пакеты для потоковой передачи...
"Потоковая передача" - это передача данных с одного устройства на другое устройство.
"Поток" (потоковая передача) это когда оба устройства между собой синхронизированы для обмена (передачи/приема) данными между собой...
Но очень часто сеть работает нестабильно и передача потока пакетов файла может, к примеру, неожиданно оборваться где-то на средине выполнения
процесса. И такой неполный файл будет уже поврежденный.
Чтобы решить такую проблему неожиданного оборвыва при передаче пакетов клиентского файла по сети - решили задействовать специальную
сериализацию загрузки пакетов клиентского файла - торрент-файл (".torrent"). При передаче клиентских файлов они разбиваются на пакеты и
хранятся в связанном списке как объекты.
Дальше сотояние таких объектов списка сохраняется (сериализуется) в торрент-файл (".torrent").
По сравнение с клиентским файлом, размер торрент-файл намного меньше. И состояние загрузки клиентского файла уже независимо контролируется на
стороне клиента, таким способом в случае разрыва сети клиентская сторона всегда может продолжить загрузку с последнего успешного момента...



С помощью Java реализуйте, пожалуйста, сериализацию и десериализацию данных для формата b-encode. Оформите ответ в виде Maven Artifact.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
1. В качестве примитивного связанного списка создадим класс справочника с простыми типами полей (сам объект)
   и функцию которая будет добавлять в него данные наших абонентов
2. Выполним сохранение текущего состояния объекта телефонного справочника (сериализацию) в торрент-файл (".torrent") с помощью парсера
   "Bencode". На JAVA напишем клиентский метод, который будет выполнять "сериализацию" нашего объекта телефонного справочника)
.. (С помощью клиентского приложения "Торрента" можно проверить (обратный процесс) "десериализацию" нашего объекта телефонного справочника)
3. На JAVA напишем клиентский метод, который будет выполнять (обратный процесс) "десериализацию" нашего объекта телефонного справочника)
   из торрент-файл (".torrent") с помощью парсера "Bencode"
4.1 Создать целый список торрент-файлов (".torrent") для телефонных справочников отдельных стран (например: для России, для Украины, для Грузии)
4.2 Создать шаблонные типы разных классов (объектов) справочников (которые будут использовать разную структуру данных) например:
    - телефонный справочник для городских абонетов
    - телефонный справочник для мобильных телефонной книги
    - справочник клиентов для пользователей интернет-услугами
    - справочник предприятий города
5. Попытаемся продемонстрировать выполнения (обратного действия - восстановления) "десериализации" для разных справочников и отдельных регионов,
   например: для России, для Украины, для Грузии
6. Будет хорошим тоном выполнения такого задания, если задействовать какой-нибудь трекер-сервер для выполнения действий "десериализации"
   именно по сети
.. Поскольку принцып работы "BitTorrent" основывается на многопоточности..., предлагаю сделать несколько клиентов которые будут обмениваться
   между собой информацией из торрент-файлов.
   Дело в том, что скорость загрузки пакетов данных можно увеличить если паралелльно-одновремено загружать несколько разных пакетов одного
   файла... Поскольку торрент-сервер ("трекер") он обычно один-источник, тогда например, каждый торрент-клиент может служить
   вторичным-источником для рассдачи своих пакетов для других клиентов...
7. С-эммитировать случай когда параллельно-одновременно выполняется несколько процессов "десериализации" из торрент-сервера на торрент-клиенты
   и сам механизм для увеличения скорости (параллельной) загрузки пакетов...

+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
"P2P" (peer-to-peer) это одноранговая (пиринговая) сеть. В такой сети все участники равноправны и могут уже между собой обмениваться данными (без участия сервера как в клиент-серверной архитектуре).
В такой сети отсутствуют выделенные сервера, а каждый узел (peer-пиры) является клиентом - участниками сети.
Но все же в такой сети есть и сервер "трекер" (BitTorrent-трекер), который только осуществляющий координацию клиентов участниками сети "BitTorrent". Например: сервер "трекер" собирает информацию об
участниках сети и рассылает ее всем клиентам..., но при обмене данных сам сервер "трекер" не участвует.
Только сами клиенты участниками сети ("BitTorrent") могут обмениваться между собой данными.

Дело в том, что механизм стандартной сериализации объектов в JAVA и сериализация данных по протоколу BitTorrent в формате "Bencode" - это разные вещи:
* механизм стандартной сериализации объектов в JAVA - когда текущее состояние активного объекта (данных для всех полей класса...) сохраняется в (локальный) файл... (а потом из этого файла восстанавливается)
* а сериализация данных по протоколу BitTorrent выполняет другие вещи:
  - протоколу BitTorrent был разработан для передачи по сети файлов большого размера...
  - поэтому в качестве активного объекта здесь используются уже (не классы, а) файлы, разного типа (mp3, avi, zip, ...)
  - для того чтобы такой большой файл передать по сети его (этот файл) нужно:
    > разбить на меленькие пакеты
    > собрать информацию об разбитых пакетах и размера этих пакетов
    > информацию об клиенте, участнике "BitTorrent" сети (имя клиента, IP-адресс его расположения, ...)
    > а также: название этого файла, тип файла, общий размер файла
    > ...
И такая специальная-техническая информация об состоянии файла который предварительно подготовлен для передачи по сети сохраняется (сериализуется) в специальный торрент-файл (".torrent")

Исходя из этого, суть задания заключается чтобы построить следующую архитектуру:
* 3-клиентских приложения (которые будуд делать сериализацию и десиреализацию..)
* сервер "трекер" (кторый будет объединять эти клиентские приложения...)
* подготовить большие файлы для их передачи...
* сделать их сериализацию на клиенте - торрент-файл (".torrent")
* (и запустить-продемонстрировать процесс передачи паралельно пакетов для файла между клиентами)

+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +





